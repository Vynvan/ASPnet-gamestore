@page "/editgame"
@page "/editgame/{Id:int}"
@inject NavigationManager NavigationManager
@inject GamesClient GamesClient
@inject GenreClient GenreClient
@rendermode InteractiveServer

<PageTitle>@title</PageTitle>
<h3 class="mt-3">@title</h3>

@if (genres is null || game is null)
{
   <p><em>Loading...</em></p>
}
else
{
   <div class="row">
      <div class="col-md-4">
         <EditForm Model="@game" FormName="editGame" OnValidSubmit="HandleSubmit">
            <DataAnnotationsValidator />
            <ValidationSummary />
            <div class="mb-3">
               <label for="name">Name:</label>
               <InputText id="name" @bind-Value="game.Name" class="form-control" />
               <ValidationMessage For="() => game.Name" />
            </div>
            <div class="mb-3">
               <label for="genre">Genre:</label>
               <InputSelect id="genre" @bind-Value="game.GenreId" class="form-select">
                  <option value="">Select a genre</option>
                  @foreach (var genre in genres)
                  {
                     <option value="@genre.Id">@genre.Name</option>
                  }
               </InputSelect>
               <ValidationMessage For="() => game.GenreId" />
            </div>
            <div class="mb-3">
               <label for="prize">Prize:</label>
               <InputNumber id="prize" @bind-Value="game.Prize" class="form-control" />
               <ValidationMessage For="() => game.Prize" />
            </div>
            <div class="mb-3">
               <label for="releaseDate">Release Date:</label>
               <InputDate id="releaseDate" @bind-Value="game.ReleaseDate" class="form-control" />
            </div>
            <button type="submit" class="btn btn-primary">Save</button>
            <a role="button" class="btn btn-secondary" href="/">Cancel</a>
         </EditForm>
      </div>
   </div>
}

@code {
   [Parameter]
   public int? Id { get; set; }

   [SupplyParameterFromForm]
   private GameDetails? game { get; set; }

   private Genre[]? genres;

   private string title { get; set; } = "New Game";


   protected override void OnParametersSet()
   {
      if (game is not null)
      {
         return;
      }

      if (Id.HasValue)
      {
         game = GamesClient.GetGame(Id.Value);
         title = $"Edit: {game.Name}";
      }
      else
      {
         game = new GameDetails
         {
            Name = string.Empty,
            ReleaseDate = DateOnly.FromDateTime(DateTime.Now)
         };
      }
   }


   protected override void OnInitialized()
   {
      genres = GenreClient.GetGenres();
   }


   private void HandleSubmit()
   {
      ArgumentNullException.ThrowIfNull(game);

      if (Id is null)
      {
         GamesClient.AddGame(game);
      }
      else
      {
         game.Id = Id.Value;
         GamesClient.UpdateGame(game);
      }

      NavigationManager.NavigateTo("/");
   }
}
